module Arfi
  # +Arfi::SqlFunctionLoader+ is a class which loads user defined SQL functions into database.
  class SqlFunctionLoader
    attr_accessor self.task_name: nil | String

    # +Arfi::SqlFunctionLoader.load!+                        -> (nil | void)
    #
    # Loads user defined SQL functions into database.
    #
    # @param task_name [String|nil] Name of the task.
    # @return [nil] if there is no `db/functions` directory.
    # @return [void] if there is no errors.
    # @raise [Arfi::Errors::AdapterNotSupported] if database adapter is SQLite.
    def self.load!: (task_name: nil | String) -> (nil | untyped)

    # +Arfi::SqlFunctionLoader#sql_functions_by_adapter+      -> Array<String>
    #
    # Helper method to get list of SQL files for specific database adapter.
    #
    # @!visibility private
    # @private
    # @return [Array<String>] List of SQL files.
    # @raise [Arfi::Errors::AdapterNotSupported] if database adapter is not supported.
    def self.sql_functions_by_adapter: -> Array[String]

    # +Arfi::SqlFunctionLoader#multi_db?+                       -> Boolean
    #
    # Checks if the application has been configured to work with multiple databases.
    #
    # @return [Boolean]
    def self.multi_db?: -> bool

    # +Arfi::SqlFunctionLoader#populate_multiple_db+          -> void
    #
    # Loads user defined SQL functions into all databases.
    #
    # @!visibility private
    # @private
    # @return [void]
    # @see Arfi::SqlFunctionLoader#multi_db?
    # @see Arfi::SqlFunctionLoader#populate_db
    def self.populate_multiple_db: -> void

    # +Arfi::SqlFunctionLoader#raise_unless_supported_adapter+ -> void
    #
    # Checks if the database adapter is supported.
    #
    # @return [void]
    # @raise [Arfi::Errors::AdapterNotSupported]
    def self.raise_unless_supported_adapter: -> void

    # +Arfi::SqlFunctionLoader#handle_db_population+         -> void
    #
    # Loads user defined SQL functions into database. This conditional branch was written this way because if we
    # call db:migrate:db_name, then task_name will not be nil, but it will be zero if we call db:migrate. Then we
    # check that the application has been configured to work with multiple databases in order to populate all
    # databases, and only after this check can we populate the database in case the db:migrate (or any other) task
    # has been called for configuration with a single database. Go to `lib/arfi/tasks/db.rake` for additional info.
    #
    # @!visibility private
    # @private
    # @return [void]
    def self.handle_db_population: -> untyped

    private

    # +Arfi::SqlFunctionLoader#populate_db+                   -> void
    #
    # Loads user defined SQL functions into database.
    #
    # @!visibility private
    # @private
    # @return [void]
    def self.populate_db: () -> untyped

    # +Arfi::SqlFunctionLoader#sql_files+                     -> Array<String>
    #
    # Helper method to get list of SQL files.
    #
    # @!visibility private
    # @private
    # @return [Array<String>] List of SQL files.
    def self.sql_files: () -> Array[String]

    # +Arfi::SqlFunctionLoader#conn+                          -> ActiveRecord::ConnectionAdapters::AbstractAdapter
    #
    # Helper method to get database connection.
    #
    # @!visibility private
    # @private
    # @return [ActiveRecord::ConnectionAdapters::AbstractAdapter] Database connection.
    def self.conn: () -> ::ActiveRecord::ConnectionAdapters::AbstractAdapter
  end
end
